pipeline {
    agent any

    environment {
        AWS_DEFAULT_REGION = 'us-east-1'
        CLUSTER_NAME = 'my-eks-cluster'
        REGISTRY = 'kabil2903'
        IMAGE_NAME = 'hello-world'
        IMAGE_TAG = "${env.BUILD_NUMBER}"
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: 'main', url: 'https://github.com/kabilesh2903/terapratice.git'
            }
        }

        stage('Terraform Init') {
            environment {
                AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
            }
            steps {
                dir('terraform') {
                    sh '''
                        terraform init -upgrade
                        terraform validate
                    '''
                }
            }
        }

        stage('Terraform Plan (Review)') {
            environment {
                AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
            }
            steps {
                dir('terraform') {
                    sh 'terraform plan -out=tfplan'
                }
            }
        }

        stage('Approval to Apply') {
            steps {
                script {
                    try {
                        def userInput = timeout(time: 30, unit: 'MINUTES') {
                            input(
                                id: 'Approval',
                                message: 'Do you want to apply Terraform?',
                                parameters: [
                                    choice(name: 'CONFIRM', choices: ['No', 'Yes'], description: 'Select Yes to apply, No to skip')
                                ]
                            )
                        }

                        if (userInput == 'Yes') {
                            echo "User approved. Applying Terraform..."
                            dir('terraform') {
                                withCredentials([
                                    [$class: 'AmazonWebServicesCredentialsBinding', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY']
                                ]) {
                                    sh 'terraform apply -auto-approve tfplan'
                                }
                            }
                        } else {
                            echo "User selected No. Skipping Terraform apply."
                        }
                    } catch(err) {
                        echo "No approval provided within 30 minutes. Skipping Terraform apply."
                    }
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    dockerImage = docker.build("${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}")
                }
            }
        }

        stage('Push Docker Image to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('https://index.docker.io/v1/', 'Dockerhubpass') {
                        dockerImage.push()
                    }
                }
            }
        }

        stage('Update kubeconfig (EKS Access)') {
            environment {
                AWS_ACCESS_KEY_ID     = credentials('aws-access-key-id')
                AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
            }
            steps {
                sh '''
                    aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME
                '''
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh '''
                    aws eks --region $AWS_DEFAULT_REGION update-kubeconfig --name $CLUSTER_NAME

                    kubectl apply -f k8s/deployment.yaml
                    kubectl set image deployment/hello-world-deployment \
                        hello-world-container=$REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                    kubectl rollout status deployment/hello-world-deployment
                '''
            }
        }
    }

    post {
        success {
            echo "✅ Pipeline completed successfully!"
        }
        failure {
            echo "❌ Pipeline failed. Check logs above."
        }
    }
}
